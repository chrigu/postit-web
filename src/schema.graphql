
scalar DateTime
scalar Upload


type User {
  id: ID!
  name: String!
}

type Project {
  id: ID!
  name: String!
  url: String!
  createdAt: DateTime!
}

type Postit {
  id: ID! @unique
  image: Image 
  url: String!
  detectedText: String
  x: Int!
  y: Int!
  width: Int!
  height: Int!
}

type Image {
  id: ID!
  url: String!
  detectedText: String!
  createdAt: DateTime!
  project: Project @relation(name: "ImagesProject")
  status: ImageStatus
  width: Int
  height: Int
  postits: [Postit!]!
}

enum ImageStatus {
  Uploaded, Analyzing, Analyzed
}


type File {
  id: ID!
  path: String!
  filename: String!
  mimetype: String!
  encoding: String!
}

input ProjectCreateInput {
  name: String!
}

type ImagePreviousValues {
  id: ID!
  url: String!
  detectedText: String!
  createdAt: DateTime!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type ImageStatusReturnType {
  id: ID!
  status:ImageStatus!
}

type Query {
  uploads: [File]
  getProject (id: ID!): Project
  postitsForImage (id: ID!): [Postit]!
  image (id: ID!): Image
  imageWithPostits(id: ID!): Image
 }

type Mutation {
  singleUpload (file: Upload!, projectId: ID!): Image!
  createProject (name: String!): Project!
}

type Subscription {
  imageStatus(where: ID!): ImageStatusReturnType 
}


